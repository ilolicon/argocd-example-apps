apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: guestbook
  # You'll usually want to add your resources to the argocd namespace.
  # 你通常希望将资源加到argocd命令空间
  namespace: argocd
  # Add this finalizer ONLY if you want these to cascade delete.
  # 仅在你希望这些资源进行级联删除时添加此终结器
  finalizers:
    # The default behaviour is foreground cascading deletion
    # 默认行为是前台级联删除
    - resources-finalizer.argocd.argoproj.io
    # Alternatively, you can use background cascading deletion
    # 或者 你可以使用后台级联删除
    # - resources-finalizer.argocd.argoproj.io/background
  # Add labels to your application object.
  # 向应用程序对象添加标签
  labels:
    name: guestbook
spec:
  # The project the application belongs to.
  # 应用程序所属的项目
  project: default

  # Source of the application manifests
  # 应用程序清单的源
  source:
    # Can point to either a Helm chart repo or a git repo.
    # 可以指向Helm chart仓库Git仓库
    repoURL: https://github.com/argoproj/argocd-example-apps.git  
    # For Helm, this refers to the chart version.
    # 对于Helm 这指的是chart版本
    targetRevision: HEAD  
    # This has no meaning for Helm charts pulled directly from a Helm repo instead of git.
    # 这对直接从Helm仓库而不是Git仓库拉取的Helm chart没有意义
    path: guestbook  

    # helm specific config
    # Helm特定配置
    # Set this when pulling directly from a Helm repo. DO NOT set for git-hosted Helm charts.
    # 当直接从Helm仓库拉取时设置此项. 不要为Git托管的Helm chart设置
    chart: chart-name
    helm:
      # If true then adds --pass-credentials to Helm commands to pass credentials to all domains
      # 如果为true 则向Helm命令添加--pass-credentials以将凭据传递给所有域
      passCredentials: false
      # Extra parameters to set (same as setting through values.yaml, but these take precedence)
      # 设置额外的参数(与通过values.yaml设置相同但这些参数优先)
      parameters:
      - name: "nginx-ingress.controller.service.annotations.external-dns\\.alpha\\.kubernetes\\.io/hostname"
        value: mydomain.example.com
      - name: "ingress.annotations.kubernetes\\.io/tls-acme"
        value: "true"
        # ensures that value is treated as a string
        # 确保值被视为字符串
        forceString: true

      # Use the contents of files as parameters (uses Helm's --set-file)
      # 使用文件内容作为参数(使用Helm的--set-file)
      fileParameters:
      - name: config
        path: files/config.json

      # Release name override (defaults to application name)
      # 释放名称覆盖(默认为应用程序名称)
      releaseName: guestbook

      # Helm values files for overriding values in the helm chart
      # Helm值文件用于覆盖Helm chart中的值
      # The path is relative to the spec.source.path directory defined above
      # 路径是相对于上面定义的spec.source.path目录
      valueFiles:
      - values-prod.yaml

      # Ignore locally missing valueFiles when installing Helm chart. Defaults to false
      # 安装Helm chart时忽略本地缺失的valueFiles. 默认为false
      ignoreMissingValueFiles: false

      # Values file as block file. Prefer to use valuesObject if possible (see below)
      # 值文件作为块文件. 建议尽可能使用valuesObject
      values: |
        ingress:
          enabled: true
          path: /
          hosts:
            - mydomain.example.com
          annotations:
            kubernetes.io/ingress.class: nginx
            kubernetes.io/tls-acme: "true"
          labels: {}
          tls:
            - secretName: mydomain-tls
              hosts:
                - mydomain.example.com

      # Values file as block file. This takes precedence over values
      # 值文件作为块文件. 这比values优先
      valuesObject:
        ingress:
          enabled: true
          path: /
          hosts:
            - mydomain.example.com
          annotations:
            kubernetes.io/ingress.class: nginx
            kubernetes.io/tls-acme: "true"
          labels: {}
          tls:
            - secretName: mydomain-tls
              hosts:
                - mydomain.example.com

      # Skip custom resource definition installation if chart contains custom resource definitions. Defaults to false
      # 如果图表包含自定义资源定义 则跳过自定义资源定义安装. 默认为false
      skipCrds: false
      
      # Skip schema validation if chart contains JSON schema validation. Defaults to false
      # 如果图表包含JSON模式验证  则跳过模式验证. 默认为false
      skipSchemaValidation: false

      # Optional Helm version to template with. If omitted it will fall back to look at the 'apiVersion' in Chart.yaml
      # and decide which Helm binary to use automatically. This field can be either 'v2' or 'v3'.
      # 可选的Helm版本. 如果省略 它将回退到查看Chart.yaml中的'apiVersion'并自动决定使用哪个Helm二进制文件. 该字段可以是'v2'或'v3'
      version: v2

      # You can specify the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD uses
      # the Kubernetes version of the target cluster. The value must be semver formatted. Do not prefix with `v`.
      # 您可以在模板化清单时指定要传递给Helm的Kubernetes API版本. 默认情况下 Argo CD使用目标集群的Kubernetes版本. 值必须是semver格式. 不要以`v`为前缀
      kubeVersion: 1.30.0

      # You can specify the Kubernetes resource API versions to pass to Helm when templating manifests. By default, Argo
      # CD uses the API versions of the target cluster. The format is [group/]version/kind.
      # 您可以在模板化清单时指定要传递给Helm的Kubernetes资源API版本. 默认情况下 Argo CD使用目标集群的API版本. 格式是[group/]version/kind
      apiVersions:
        - traefik.io/v1alpha1/TLSOption
        - v1/Service

      # Optional namespace to template with. If left empty, defaults to the app's destination namespace.
      # 可选的命名空间模板. 如果留空 默认为应用程序的目标命名空间
      namespace: custom-namespace

    # kustomize specific config
    # Kustomize特定配置
    kustomize:
      # Optional kustomize version. Note: version must be configured in argocd-cm ConfigMap
      # 可选的kustomize版本. 注意: 版本必须在argocd-cm ConfigMap中配置
      version: v3.5.4
      # Supported kustomize transformers. https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/
      # 支持的kustomize转换器
      namePrefix: prod-
      nameSuffix: -some-suffix
      commonLabels:
        foo: bar
      commonAnnotations:
        beep: boop-${ARGOCD_APP_REVISION}
      # Toggle which enables/disables env variables substitution in commonAnnotations
      # 启用/禁用commonAnnotations中的环境变量替换的切换
      commonAnnotationsEnvsubst: true
      forceCommonLabels: false
      forceCommonAnnotations: false
      images:
      - gcr.io/heptio-images/ks-guestbook-demo:0.2
      - my-app=gcr.io/my-repo/my-app:0.1
      namespace: custom-namespace
      replicas:
      - name: kustomize-guestbook-ui
        count: 4
      components:
        # relative to the kustomization.yaml (`source.path`).
        # 相对于kustomization.yaml(`source.path`)
        - ../component  
      patches:
        - target:
            kind: Deployment
            name: guestbook-ui
          patch: |-
            - op: add # Add new element to manifest
              path: /spec/template/spec/nodeSelector/
              value:
                env: "pro"

      # You can specify the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD uses
      # the Kubernetes version of the target cluster. The value must be semver formatted. Do not prefix with `v`.
      # 您可以在模板化清单时指定要传递给Helm的Kubernetes API版本. 默认情况下 Argo CD使用目标集群的Kubernetes版本. 值必须是semver格式. 不要以`v`为前缀
      kubeVersion: 1.30.0

      # You can specify the Kubernetes resource API versions to pass to Helm when templating manifests. By default, Argo
      # CD uses the API versions of the target cluster. The format is [group/]version/kind.
      # 您可以在模板化清单时指定要传递给Helm的Kubernetes资源API版本. 默认情况下 Argo CD使用目标集群的API版本. 格式是[group/]version/kind
      apiVersions:
        - traefik.io/v1alpha1/TLSOption
        - v1/Service

    # directory
    directory:
      recurse: true
      jsonnet:
        # A list of Jsonnet External Variables
        # Jsonnet外部变量列表
        extVars:
        - name: foo
          value: bar
          # You can use "code" to determine if the value is either string (false, the default) or Jsonnet code (if code is true).
          # 您可以使用"code"来确定值是字符串(false, 默认值)还是Jsonnet代码(如果code为true)
        - code: true
          name: baz
          value: "true"
        # A list of Jsonnet Top-level Arguments
        tlas:
        - code: false
          name: foo
          value: bar
      # Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during
      # manifest generation. This takes precedence over the `include` field.
      # To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
      exclude: 'config.yaml'
      # Include contains a glob pattern to match paths against that should be explicitly included during manifest
      # generation. If this field is set, only matching manifests will be included.
      # To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
      include: '*.yaml'

    # plugin specific config
    plugin:
      # If the plugin is defined as a sidecar and name is not passed, the plugin will be automatically matched with the
      # Application according to the plugin's discovery rules.
      name: mypluginname
      # environment variables passed to the plugin
      env:
        - name: FOO
          value: bar
      # Plugin parameters are new in v2.5.
      parameters:
        - name: string-param
          string: example-string
        - name: array-param
          array: [item1, item2]
        - name: map-param
          map:
            param-name: param-value
  
  # Sources field specifies the list of sources for the application
  # Sources字段指定应用程序的源列表
  sources:
    # Can point to either a Helm chart repo or a git repo.
    # 可以指向Helm chart仓库Git仓库
    - repoURL: https://github.com/argoproj/argocd-example-apps.git 
      # For Helm, this refers to the chart version.
      # 对于Helm 这指的是chart版本
      targetRevision: HEAD 
      # This has no meaning for Helm charts pulled directly from a Helm repo instead of git.
      # 这对直接从Helm仓库而不是Git仓库拉取的Helm chart没有意义
      path: guestbook
      # For Helm, acts as a reference to this source for fetching values files from this source. Has no meaning when under `source` field
      # 对于Helm 来说 作为从此源获取值文件的引用. 当在`source`字段下时没有意义
      ref: my-repo  

  # Destination cluster and namespace to deploy the application
  # 部署应用程序的目标集群和命名空间
  destination:
    # cluster API URL
    # 集群API URL
    server: https://kubernetes.default.svc
    # or cluster name
    # 或集群名称
    # name: in-cluster
    # The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
    # 仅对未设置.metadata.namespace值的命名空间范围资源设置命名空间
    namespace: guestbook
    
  # Extra information to show in the Argo CD Application details tab
  # 在Argo CD应用程序详细信息选项卡中显示的额外信息
  info:
    - name: 'Example:'
      value: 'https://example.com'
      
  # Sync policy
  # 同步策略
  syncPolicy:
    # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
    # 默认情况下自动同步重试失败的尝试5次 重试之间的延迟为(5s, 10s, 20s, 40s, 80s); 使用`retry`字段控制重试
    automated:
      # Specifies if resources should be pruned during auto-syncing ( false by default ).
      # 指定是否应在自动同步期间修剪资源(默认为false)
      prune: true
      # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      # 指定是否应在目标Kubernetes集群中仅更改资源且未检测到git更改时执行部分应用程序同步(默认为false)
      selfHeal: true 
      # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ). Allows deleting all application resources during automatic syncing ( false by default ).
      # 指定是否应在目标Kubernetes集群中仅更改资源且未检测到git更改时执行部分应用程序同步(默认为false) 允许在自动同步期间删除所有应用程序资源(默认为false)
      allowEmpty: false 
    
    # Sync options which modifies sync behavior
    # 修改同步行为的同步选项
    syncOptions:
    # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    # 禁用资源验证(等效于'kubectl apply --validate=false')(默认为true)
    - Validate=false 
    # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    # 命名空间自动创建确保在目标集群中存在指定为应用程序目标的命名空间
    - CreateNamespace=true 
    # Supported policies are background, foreground and orphan.
    # 支持的策略有background, foreground和orphan
    - PrunePropagationPolicy=foreground 
    # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
    # 允许资源修剪作为同步操作的最终隐式波发生
    - PruneLast=true 
    # When syncing changes, respect fields ignored by the ignoreDifferences configuration
    # 同步更改时, 尊重ignoreDifferences配置忽略的字段
    - RespectIgnoreDifferences=true
    # Only sync out-of-sync resources, rather than applying every object in the application
    # 仅同步out-of-sync的资源 而不是应用程序中的每个对象
    - ApplyOutOfSyncOnly=true

    # Sets the metadata for the application namespace. Only valid if CreateNamespace=true (see above), otherwise it's a no-op.
    # 为应用程序命名空间设置元数据. 仅在CreateNamespace=true(见上文)时有效, 否则它是一个空操作
    managedNamespaceMetadata:
      # The labels to set on the application namespace
      # 在应用程序命名空间上设置的标签
      labels: 
        any: label
        you: like
      # The annotations to set on the application namespace
      # 在应用程序命名空间上设置的注释
      annotations: 
        the: same
        applies: for
        annotations: on-the-namespace

    # The retry feature is available since v1.7
    # 重试功能自v1.7起可用
    retry:
      # number of failed sync attempt retries; unlimited number of attempts if less than 0
      # 失败的同步尝试重试次数; 如果小于0 则尝试次数不受限制
      limit: 5 
      backoff:
        # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        # 退避的数量. 默认单位是秒, 但也可以是持续时间(例如"2m", "1h")
        duration: 5s 
        # a factor to multiply the base duration after each failed retry
        # 每次失败重试后乘以基础持续时间的因子
        factor: 2 
        # the maximum amount of time allowed for the backoff strategy
        # 退避策略允许的最长时间
        maxDuration: 3m 

  # Will ignore differences between live and desired states during the diff. Note that these configurations are not
  # used during the sync process unless the `RespectIgnoreDifferences=true` sync option is enabled.
  # 在diff期间将忽略实时状态和期望状态之间的差异. 请注意 这些配置在同步过程中不会使用 除非启用了`RespectIgnoreDifferences=true`同步选项
  ignoreDifferences:
  # for the specified json pointers
  # 对于指定的json指针
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  - kind: ConfigMap
    jqPathExpressions:
    - '.data["config.yaml"].auth'
  # for the specified managedFields managers
  # 对于指定的managedFields managers
  - group: "*"
    kind: "*"
    managedFieldsManagers:
    - kube-controller-manager
    # Name and namespace are optional. If specified, they must match exactly, these are not glob patterns.
    # 名称和命名空间是可选的. 如果指定 它们必须完全匹配 这些不是通配符模式
    name: my-deployment
    namespace: my-namespace

  # RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for
  # informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional
  # circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the
  # space used to store the history, so we do not recommend increasing it.
  # RevisionHistoryLimit限制应用程序修订历史记录中保留的项目数量 用于信息目的以及回滚到以前版本. 
  # 这应该只在特殊情况下更改. 
  # 设置为零将不存储历史记录. 这将减少使用的存储. 增加将增加用于存储历史记录的空间, 因此我们不建议增加它
  revisionHistoryLimit: 10
